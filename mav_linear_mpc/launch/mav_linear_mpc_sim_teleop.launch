<launch>
  <arg name="mav_name" default="firefly" />
  <arg name="namespace" default="$(arg mav_name)"/>
  <group ns="$(arg namespace)">
    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <rosparam file="$(find mav_disturbance_observer_first_order)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="verbose" value="true" />
      <param name="use_rc_teleop" value="true" />
      <param name="reference_frame" value="world" />
      <remap from="/$(arg mav_name)/rc" to="/$(arg mav_name)/joy" />
    </node>
    

    <!-- joy_node takes joystick input and outputs to rc_teleop -->
    <node name="joy_node" pkg="joy" type="joy_node" />

    <!-- Don't need joy interface as function is fulfilled by rc_teleop -->
    <!-- <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" /> -->
  

    <!-- RC Teleop in mav_linear_mpc node outputs to PID_attitude_controller. Also requires odometry from gazebo -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
  </group>
</launch>
