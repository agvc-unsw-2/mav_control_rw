#!/usr/bin/env python
PACKAGE = "mav_nonlinear_mpc"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Format:
# "name", type, level, description, default, min, min

# Teleop
#gen.add("use_rc_teleop",    bool_t,    0, "Enable RC Teleoperation", True)

# Model parameters (originally constant in YAML file)
gen.add("mass",    double_t,    0, "Model mass", 1.650 , 0.0001 , 100.0)
gen.add("roll_time_constant",    double_t,    0, "Model roll_time_constant", 0.624196 , 0.0001 , 100.0)
gen.add("roll_gain",    double_t,    0, "Model roll_gain", 1.173807 , 0.0001 ,  100.0)
gen.add("pitch_time_constant",    double_t,    0, "Model pitch_time_constant", 0.549053 , 0.0001, 100.0)
gen.add("pitch_gain",    double_t,    0, "Model pitch_gain", 1.136624 , 0.0001, 100.0)

# More parameters
gen.add("position_error_integration_limit",    double_t,    0, "Limit of position error integration", 2, 0.0, 100)
gen.add("antiwindup_ball",    double_t,    0, "If error is greater than ball, no integral action applied", 0.4, 0.0, 100)
#gen.add("sampling_time",    double_t,    0, "Controller sampling time (same as odometry msg", 0.01)
#gen.add("prediction_sampling_time",    double_t,    0, "prediction_sampling_time", 0.1)

# The rest of the parameters (already in dynamic config file)
gen.add("q_x",    double_t,    0, "Penality on x axis pos", 50.0 ,  0.001, 500.0)
gen.add("q_y",    double_t,    0, "Penality on y axis pos", 50.0 ,  0.001, 500.0)
gen.add("q_z",    double_t,    0, "Penality on z axis pos", 80.0 ,  0.001, 500.0)

gen.add("q_vx",    double_t,    0, "Penality on x axis vel", 20.0 ,  0.001, 500.0)
gen.add("q_vy",    double_t,    0, "Penality on y axis vel", 20.0 ,  0.001, 500.0)
gen.add("q_vz",    double_t,    0, "Penality on z axis vel", 35.0 ,  0.001, 500.0)

gen.add("q_roll",     double_t,    0, "Penality on roll state", 20.0 ,  0.001, 500.0)
gen.add("q_pitch",    double_t,    0, "Penality on pitch state", 20.0 ,  0.001, 500.0)

gen.add("r_roll",     double_t,    0, "Penality on roll cmd", 30.0 ,  0.001, 500.0)
gen.add("r_pitch",    double_t,    0, "Penality on pitch cmd", 30.0 , 0.001, 500.0)
gen.add("r_thrust",   double_t,    0, "Penality on thrust cmd", 5.0 , 0.001, 500.0)

gen.add("roll_max",     double_t,    0, "max roll cmd [rad]", 0.45, 0.001, 1.0)
gen.add("pitch_max",    double_t,    0, "max pitch cmd [rad]", 0.45, 0.001, 1.0)
gen.add("yaw_rate_max",     double_t,    0, "max yawrate cmd [rad/s]", 1.5, 0.001, 2.0)
gen.add("thrust_min",   double_t,    0, "min thrust cmd [m/s2]", 5.0 ,  0.001, 25.0)
gen.add("thrust_max",   double_t,    0, "max thrust cmd [m/s2]", 15.0 ,  0.001, 100.0)

gen.add("K_yaw",   double_t,    0, "yaw gain", 0.5 ,  0.01, 10.0)
gen.add("Ki_xy",   double_t,    0, "integrator gain for xy", 0.2 ,  0.01, 10.0)
gen.add("Ki_altitude",   double_t,    0, "integrator gain for altitude", 0.2 ,  0.01, 10.0)

gen.add("enable_offset_free",   bool_t,   0, "XY offset free MPC",  True)
gen.add("enable_integrator",   bool_t,   0, "integral action",  False)

exit(gen.generate(PACKAGE, "Config", "NonLinearMPC"))
